from django.db import models
from django.contrib.auth.models import User

class MobileNetwork(models.Model):
    SERVICE_CHOICES = (
        ('Airtime', 'Airtime'),
        ('Data', 'Data'),
        ('Cable TV', 'Cable TV'),
        # Add more choices as needed
    )
    service = models.CharField(max_length=50, choices=SERVICE_CHOICES)

    def _str_(self):
        return self.service

class DataBundle(models.Model):
    price = models.DecimalField(max_digits=10, decimal_places=2)
    validity = models.IntegerField(default=30)
    transaction_id = models.CharField(max_length=255, blank=True, null=True)
    phone_number = models.CharField(max_length=15)  # Added phone_number field
    purchase_date = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # User associated with the purchase

    def _str_(self):
        return "Data Bundle"

class AirtimeTopup(models.Model):
    NETWORK_CHOICES = (
        ('MTN', 'MTN'),
        ('Airtel', 'Airtel'),
        ('Glo', 'Glo'),
        ('9mobile', '9mobile'),
        # Add more choices as needed
    )

    network = models.CharField(max_length=20, choices=NETWORK_CHOICES)
    network_code = models.CharField(max_length=10)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_id = models.CharField(max_length=255, blank=True, null=True)
    phone_number = models.CharField(max_length=15)
    purchase_date = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # User associated with the top-up

    def _str_(self):
        return f"{self.network} Airtime Topup"

class TVSubscription(models.Model):
    PROVIDER_CHOICES = (
        ('Dstv', 'Dstv'),
        ('GOtv', 'GOtv'),
        ('StarTimes', 'StarTimes'),
    )

    package = models.CharField(max_length=50)
    subscription_type = models.CharField(max_length=20, choices=(
        ('Monthly', 'Monthly'),
        ('Annual', 'Annual'),
    ))
    price = models.DecimalField(max_digits=10, decimal_places=2)
    duration = models.IntegerField(default=30)
    provider = models.CharField(max_length=20, choices=PROVIDER_CHOICES)
    subscription_id = models.CharField(max_length=255, blank=True, null=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # User associated with the subscription
    phone_number = models.CharField(max_length=15)  # Added phone_number field
    purchase_date = models.DateTimeField(auto_now_add=True)

    def _str_(self):
        return f"{self.provider} - {self.package} TV Subscription"

class UserProfile(models.Model):
    final_balance = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=50)
    email = models.EmailField(max_length=255)
    phone_number = models.CharField(max_length=15, blank=True, null=True)

    def _str_(self):
        return self.name

class FundWalletTransaction(models.Model):
    PAYMENT_METHOD_CHOICES = (
        ('Card', 'Card Payment'),
        ('Manual', 'Manual Payment'),
    )

    reference_number = models.CharField(max_length=255, unique=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    fund_wallet_method = models.CharField(max_length=20, choices=PAYMENT_METHOD_CHOICES)
    fund_wallet_details = models.CharField(max_length=255, blank=True, null=True)  # Payment details
    manual_payment_receipt = models.ImageField(upload_to='manual_receipts/', blank=True, null=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # User associated with the transaction
    status = models.CharField(max_length=20, choices=(
        ('Pending', 'Pending'),
        ('Processing', 'Processing'),
        ('Successful', 'Successful'),
        ('Failed', 'Failed'),
    ), default='Pending')
    date = models.DateTimeField(auto_now_add=True)

    def _str_(self):
        return f"Funding Transaction - {self.reference_number}"

class Transaction(models.Model):
    reference_number = models.CharField(max_length=255, unique=True)
    service = models.CharField(max_length=20, choices=(
        ('Airtime', 'Airtime'),
        ('Data', 'Data'),
        ('Cable TV', 'Cable TV'),
        # Add more choices as needed
    ))
    description = models.CharField(max_length=255)
    phone_number = models.CharField(max_length=15)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_mode = models.CharField(max_length=20, choices=(
        ('Debit', 'Debit'),
        ('Credit', 'Credit'),
    ))
    initial_balance = models.DecimalField(max_digits=10, decimal_places=2)
    final_balance = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=(
        ('Pending', 'Pending'),
        ('Processing', 'Processing'),
        ('Successful', 'Successful'),
        ('Failed', 'Failed'),
    ), default='Pending')
    date = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # User associated with the transaction

    def _str_(self):
        return f"{self.service} Transaction - {self.reference_number}"
